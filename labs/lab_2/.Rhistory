hospitals_proj <- hospitals_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
tracts_vulnerable_only <- tract_vuln %>%
filter(vulnerable == TRUE) %>%
st_as_sf()
tracts_underserved <- tract_vuln %>%
filter(underserved == TRUE) %>%
st_as_sf()
st_is_valid(tracts_vulnerable_only) %>% table()
tracts_vulnerable_only <- tracts_vulnerable_only %>%
filter(!st_is_empty(geometry), !is.na(st_dimension(geometry)))
nrow(tracts_vulnerable_only)
sum(st_is_empty(tracts_vulnerable_only))
class(tracts_vulnerable_only)
st_geometry(tracts_vulnerable_only)
#trial plot
st_geometry(census_tracts)
tracts_vulnerable_only <- census_tracts %>%
left_join(tracts_vulnerable_only %>% st_drop_geometry(), by = "GEOID") %>%
filter(vulnerable == TRUE)
#refinement
tracts_vulnerable_only <- tracts_vulnerable_only %>%
mutate(category = case_when(
underserved == TRUE ~ "Underserved",
vulnerable == TRUE ~ "Vulnerable",
TRUE ~ "Other"
))
ggplot() +
geom_sf(data = pa_counties_proj, fill = "grey95", color = "darkgrey", size = 0.2) +
geom_sf(data = tracts_vulnerable_only, aes(fill = category), color = NA, alpha = 0.7) +
geom_sf(data = hospitals_proj, color = "black", fill = "black", shape = 21, size = 1) +
scale_fill_manual(
values = c(
"Underserved" = "red",
"Vulnerable" = "darkblue",
"Other" = "grey90"
),
name = "Tract Category"
) +
labs(
title = "Underserved and Vulnerable Populations in Pennsylvania",
subtitle = "Census tracts with elderly + low-income residents more than 15 miles from a hospital",
caption = "Data: ACS 2022, Pennsylvania Hospitals"
) +
theme_void() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid = element_blank()
)
# Create distribution visualization
### Map 2: Detailed Vulnerability Map (Robust Version)
tract_vuln <- tract_vuln %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
pa_counties_proj <- pa_counties_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
hospitals_proj <- hospitals_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
tracts_vulnerable_only <- tract_vuln %>%
filter(vulnerable == TRUE) %>%
st_as_sf()
tracts_underserved <- tract_vuln %>%
filter(underserved == TRUE) %>%
st_as_sf()
st_is_valid(tracts_vulnerable_only) %>% table()
tracts_vulnerable_only <- tracts_vulnerable_only %>%
filter(!st_is_empty(geometry), !is.na(st_dimension(geometry)))
nrow(tracts_vulnerable_only)
sum(st_is_empty(tracts_vulnerable_only))
class(tracts_vulnerable_only)
st_geometry(tracts_vulnerable_only)
#trial plot
st_geometry(census_tracts)
tracts_vulnerable_only <- census_tracts %>%
left_join(tracts_vulnerable_only %>% st_drop_geometry(), by = "GEOID") %>%
filter(vulnerable == TRUE)
#refinement
tracts_vulnerable_only <- tracts_vulnerable_only %>%
mutate(category = case_when(
underserved == TRUE ~ "Underserved",
vulnerable == TRUE ~ "Vulnerable",
TRUE ~ "Other"
))
ggplot() +
geom_sf(data = pa_counties_proj, fill = "grey95", color = "darkgrey", size = 0.2) +
geom_sf(data = tracts_vulnerable_only, aes(fill = category), color = NA, alpha = 0.7) +
geom_sf(data = hospitals_proj, color = "black", fill = "black", shape = 21, size = 1) +
scale_fill_manual(
values = c(
"Underserved" = "red",
"Vulnerable" = "firebrick4",
"Other" = "grey90"
),
name = "Tract Category"
) +
labs(
title = "Underserved and Vulnerable Populations in Pennsylvania",
subtitle = "Census tracts with elderly + low-income residents more than 15 miles from a hospital",
caption = "Data: ACS 2022, Pennsylvania Hospitals"
) +
theme_void() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid = element_blank()
)
# Create distribution visualization
### Map 2: Detailed Vulnerability Map (Robust Version)
tract_vuln <- tract_vuln %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
pa_counties_proj <- pa_counties_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
hospitals_proj <- hospitals_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
tracts_vulnerable_only <- tract_vuln %>%
filter(vulnerable == TRUE) %>%
st_as_sf()
tracts_underserved <- tract_vuln %>%
filter(underserved == TRUE) %>%
st_as_sf()
st_is_valid(tracts_vulnerable_only) %>% table()
tracts_vulnerable_only <- tracts_vulnerable_only %>%
filter(!st_is_empty(geometry), !is.na(st_dimension(geometry)))
nrow(tracts_vulnerable_only)
sum(st_is_empty(tracts_vulnerable_only))
class(tracts_vulnerable_only)
st_geometry(tracts_vulnerable_only)
#trial plot
st_geometry(census_tracts)
tracts_vulnerable_only <- census_tracts %>%
left_join(tracts_vulnerable_only %>% st_drop_geometry(), by = "GEOID") %>%
filter(vulnerable == TRUE)
#refinement
tracts_vulnerable_only <- tracts_vulnerable_only %>%
mutate(category = case_when(
underserved == TRUE ~ "Underserved",
vulnerable == TRUE ~ "Vulnerable",
TRUE ~ "Other"
))
ggplot() +
geom_sf(data = pa_counties_proj, fill = "grey95", color = "darkgrey", size = 0.2) +
geom_sf(data = tracts_vulnerable_only, aes(fill = category), color = NA, alpha = 0.7) +
geom_sf(data = hospitals_proj, color = "grey18", fill = "grey18", shape = 21, size = 1) +
scale_fill_manual(
values = c(
"Underserved" = "red",
"Vulnerable" = "firebrick4",
"Other" = "grey90"
),
name = "Tract Category"
) +
labs(
title = "Underserved and Vulnerable Populations in Pennsylvania",
subtitle = "Census tracts with elderly + low-income residents more than 15 miles from a hospital",
caption = "Data: ACS 2022, Pennsylvania Hospitals"
) +
theme_void() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid = element_blank()
)
# Create distribution visualization
### Map 2: Detailed Vulnerability Map (Robust Version)
tract_vuln <- tract_vuln %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
pa_counties_proj <- pa_counties_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
hospitals_proj <- hospitals_proj %>%
filter(!st_is_empty(geometry)) %>%
st_make_valid()
tracts_vulnerable_only <- tract_vuln %>%
filter(vulnerable == TRUE) %>%
st_as_sf()
tracts_underserved <- tract_vuln %>%
filter(underserved == TRUE) %>%
st_as_sf()
st_is_valid(tracts_vulnerable_only) %>% table()
tracts_vulnerable_only <- tracts_vulnerable_only %>%
filter(!st_is_empty(geometry), !is.na(st_dimension(geometry)))
nrow(tracts_vulnerable_only)
sum(st_is_empty(tracts_vulnerable_only))
class(tracts_vulnerable_only)
st_geometry(tracts_vulnerable_only)
#trial plot
st_geometry(census_tracts)
tracts_vulnerable_only <- census_tracts %>%
left_join(tracts_vulnerable_only %>% st_drop_geometry(), by = "GEOID") %>%
filter(vulnerable == TRUE)
#refinement
tracts_vulnerable_only <- tracts_vulnerable_only %>%
mutate(category = case_when(
underserved == TRUE ~ "Underserved",
vulnerable == TRUE ~ "Vulnerable",
TRUE ~ "Other"
))
ggplot() +
geom_sf(data = pa_counties_proj, fill = "grey95", color = "darkgrey", size = 0.2) +
geom_sf(data = tracts_vulnerable_only, aes(fill = category), color = NA, alpha = 0.7) +
geom_sf(data = hospitals_proj, color = "grey18", fill = "grey22", shape = 21, size = 1) +
scale_fill_manual(
values = c(
"Underserved" = "red",
"Vulnerable" = "firebrick4",
"Other" = "grey90"
),
name = "Tract Category"
) +
labs(
title = "Underserved and Vulnerable Populations in Pennsylvania",
subtitle = "Census tracts with elderly + low-income residents more than 15 miles from a hospital",
caption = "Data: ACS 2022, Pennsylvania Hospitals"
) +
theme_void() +
theme(
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
legend.position = "bottom",
legend.title = element_text(face = "bold"),
panel.grid = element_blank()
)
# Create distribution visualization
ggplot(tract_vuln, aes(x = dist_to_hospital_miles)) +
geom_histogram(binwidth = 2, fill = "steelblue", color = "white", alpha = 0.8) +
geom_vline(xintercept = 15, linetype = "dashed", color = "red", size = 1) +
labs(
title = "Distribution of Distances to Nearest Hospital (Vulnerable Tracts)",
x = "Distance to Nearest Hospital (miles)",
y = "Number of Vulnerable Tracts",
caption = "Dashed line = 15-mile underserved threshold"
) +
theme_minimal()
# Load your additional dataset
schools <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/Schools.geojson")
crime <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/incidents_part1_part2 (2)/incidents_part1_part2.shp")
bikenetwork <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/Bike_Network.geojson")
target_crs <- st_crs(2272)
schools <- st_transform(schools, target_crs)
crime <- st_transform(crime, target_crs)
bikenetwork <- st_transform(bikenetwork, target_crs)
summary(schools)
summary(crime)
summary(bikenetwork)
# Your spatial analysis
school_buffers <- st_buffer(schools, dist = 1000)  # creates a 1000 ft safety zone around schools
school_buffers <- school_buffers %>%
rename(school_id = objectid) #rename the school ids so the columns have different names
crime <- crime %>%
rename(crime_id = objectid)
school_crime_counts <- st_join(school_buffers, crime, join = st_contains) %>%
group_by(school_id, school_name) %>%  # Use unique school ID
summarise(
n_crimes = n(),
.groups = "drop"
)
#including the coverage of the bike network in Philly
bike_in_buffers <- st_intersection(bikenetwork, school_buffers)
bike_length_per_school <- bike_in_buffers %>%
group_by(school_id, school_name) %>%
summarise(
bike_length_ft = sum(st_length(geometry)),
.groups = "drop"
)
#Bringing all the data together
# Drop geometry for bike summary
bike_length_per_school_df <- bike_length_per_school %>%
st_drop_geometry()
# Now join safely
school_safety_summary <- school_crime_counts %>%
left_join(bike_length_per_school_df, by = c("school_id", "school_name")) %>%
mutate(bike_length_ft = ifelse(is.na(bike_length_ft), 0, bike_length_ft))
#Map of findings
library(ggplot2)
library(scales)
school_crime_counts_df <- st_drop_geometry(school_crime_counts)
# Merge crime counts to school buffers for plotting
school_buffers_plot <- school_buffers %>%
left_join(school_crime_counts_df, by = c("school_id", "school_name"))
school_buffers_plot <- school_buffers_plot %>%
mutate(n_crimes = ifelse(is.na(n_crimes), 0, n_crimes))
# Optionally, use a transformation to highlight variation (e.g., sqrt)
school_buffers_plot <- school_buffers_plot %>%
mutate(n_crimes_sqrt = sqrt(n_crimes))
ggplot() +
# School buffers shaded by sqrt of number of crimes to improve visual contrast
geom_sf(data = school_buffers_plot, aes(fill = n_crimes_sqrt), color = NA, alpha = 0.6) +
# Schools as points
geom_sf(data = schools, color = "blue", size = 2, shape = 21, fill = "white") +
# Bike network within buffers as green lines
geom_sf(data = bike_in_buffers, color = "darkgreen", size = 0.5, alpha = 0.7) +
# Scale for crime counts with proper labels
scale_fill_gradient(
low = "yellow",
high = "red",
name = "Number of Crimes",
labels = function(x) round(x^2)  # reverse the sqrt transformation for legend
) +
labs(
title = "Philadelphia School Safety Zones",
subtitle = "Crime incidents within 1000 ft buffer zones and bike network coverage",
caption = "Data source: OpenDataPhilly (Schools, Crime Incidents, Bike Network)"
) +
theme_minimal() +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 9)
)
# Your spatial analysis
ggplot(school_buffers_plot) +
geom_sf(aes(fill = n_crimes), color = NA) +
scale_fill_viridis_c(option = "inferno", name = "Crime Count") +
labs(
title = "Philadelphia School Safety Zones",
subtitle = "Crime incidents within 1000 ft of schools",
caption = "Source: OpenDataPhilly (2025)"
) +
theme_void() +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12)
)
# Ensure both layers have the same CRS
bikenetwork <- st_transform(bikenetwork, st_crs(school_buffers_plot))
# --- 1. Intersect bike network with school buffers ---
# This keeps only the bike segments that fall within 1000 ft of schools
bike_in_buffers <- st_intersection(bikenetwork, school_buffers_plot)
# --- 2. Map: Crime gradient + bike network inside buffers ---
ggplot() +
# School buffer polygons shaded by number of crimes
geom_sf(data = school_buffers_plot, aes(fill = n_crimes), color = NA) +
# Bike network segments within buffers (cyan lines)
geom_sf(
data = bike_in_buffers,
color = "cyan3",
size = 0.6,
alpha = 0.8
) +
# Color scale for crime density
scale_fill_viridis_c(option = "inferno", name = "Crime Count") +
# Titles and labels
labs(
title = "Philadelphia School Safety Zones and Bike Network Coverage",
subtitle = "Bike network segments within 1000 ft of schools overlaid on crime density",
caption = "Source: OpenDataPhilly (2025)"
) +
# Minimal map style
theme_void() +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12)
)
# Your spatial analysis
school_buffers <- st_buffer(schools, dist = 1000)  # creates a 1000 ft safety zone around schools
school_buffers <- school_buffers %>%
rename(school_id = objectid) #rename the school ids so the columns have different names
crime <- crime %>%
rename(crime_id = objectid)
# Load your additional dataset
schools <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/Schools.geojson")
crime <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/incidents_part1_part2 (2)/incidents_part1_part2.shp")
bikenetwork <- st_read("C:/Users/ixche/Desktop/PPA/Working Files/lab_2/Bike_Network.geojson")
target_crs <- st_crs(2272)
schools <- st_transform(schools, target_crs)
crime <- st_transform(crime, target_crs)
bikenetwork <- st_transform(bikenetwork, target_crs)
summary(schools)
summary(crime)
summary(bikenetwork)
# Your spatial analysis
school_buffers <- st_buffer(schools, dist = 1000)  # creates a 1000 ft safety zone around schools
school_buffers <- school_buffers %>%
rename(school_id = objectid) #rename the school ids so the columns have different names
crime <- crime %>%
rename(crime_id = objectid)
school_crime_counts <- st_join(school_buffers, crime, join = st_contains) %>%
group_by(school_id, school_name) %>%  # Use unique school ID
summarise(
n_crimes = n(),
.groups = "drop"
)
#including the coverage of the bike network in Philly
bike_in_buffers <- st_intersection(bikenetwork, school_buffers)
bike_length_per_school <- bike_in_buffers %>%
group_by(school_id, school_name) %>%
summarise(
bike_length_ft = sum(st_length(geometry)),
.groups = "drop"
)
#Bringing all the data together
# Drop geometry for bike summary
bike_length_per_school_df <- bike_length_per_school %>%
st_drop_geometry()
# Now join safely
school_safety_summary <- school_crime_counts %>%
left_join(bike_length_per_school_df, by = c("school_id", "school_name")) %>%
mutate(bike_length_ft = ifelse(is.na(bike_length_ft), 0, bike_length_ft))
#Map of findings
library(ggplot2)
library(scales)
school_crime_counts_df <- st_drop_geometry(school_crime_counts)
# Merge crime counts to school buffers for plotting
school_buffers_plot <- school_buffers %>%
left_join(school_crime_counts_df, by = c("school_id", "school_name"))
school_buffers_plot <- school_buffers_plot %>%
mutate(n_crimes = ifelse(is.na(n_crimes), 0, n_crimes))
# Optionally, use a transformation to highlight variation (e.g., sqrt)
school_buffers_plot <- school_buffers_plot %>%
mutate(n_crimes_sqrt = sqrt(n_crimes))
# Your spatial analysis
ggplot(school_buffers_plot) +
geom_sf(aes(fill = n_crimes), color = NA) +
scale_fill_viridis_c(option = "inferno", name = "Crime Count") +
labs(
title = "Philadelphia School Safety Zones",
subtitle = "Crime incidents within 1000 ft of schools",
caption = "Source: OpenDataPhilly (2025)"
) +
theme_void() +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12)
)
# Ensure both layers have the same CRS
bikenetwork <- st_transform(bikenetwork, st_crs(school_buffers_plot))
# --- 1. Intersect bike network with school buffers ---
# This keeps only the bike segments that fall within 1000 ft of schools
bike_in_buffers <- st_intersection(bikenetwork, school_buffers_plot)
# --- 2. Map: Crime gradient + bike network inside buffers ---
ggplot() +
# School buffer polygons shaded by number of crimes
geom_sf(data = school_buffers_plot, aes(fill = n_crimes), color = NA) +
# Bike network segments within buffers (cyan lines)
geom_sf(
data = bike_in_buffers,
color = "cyan3",
size = 0.6,
alpha = 0.8
) +
# Color scale for crime density
scale_fill_viridis_c(option = "inferno", name = "Crime Count") +
# Titles and labels
labs(
title = "Philadelphia School Safety Zones and Bike Network Coverage",
subtitle = "Bike network segments within 1000 ft of schools overlaid on crime density",
caption = "Source: OpenDataPhilly (2025)"
) +
# Minimal map style
theme_void() +
theme(
legend.position = "right",
plot.title = element_text(face = "bold", size = 16),
plot.subtitle = element_text(size = 12)
)
# Summary Statistics for School Safety Analysis
# 1. Total number of schools analyzed
n_schools <- nrow(school_crime_counts)
# 2. Total number of crimes within 1000 ft of schools
total_crimes <- sum(school_crime_counts$n_crimes, na.rm = TRUE)
# 3. Average number of crimes per school buffer
avg_crimes_per_school <- mean(school_crime_counts$n_crimes, na.rm = TRUE)
# 4. Number (and percent) of schools with *zero* nearby crimes
schools_no_crime <- sum(school_crime_counts$n_crimes == 0, na.rm = TRUE)
pct_no_crime <- round(100 * schools_no_crime / n_schools, 1)
# 5. Bike network coverage summary
total_bike_length <- sum(bike_length_per_school$bike_length_ft, na.rm = TRUE)
avg_bike_length <- mean(bike_length_per_school$bike_length_ft, na.rm = TRUE)
# Combine into a simple summary table
summary_table <- data.frame(
Metric = c(
"Total schools analyzed",
"Total crimes within 1000 ft",
"Average crimes per school",
"Schools with no nearby crimes",
"Percent of schools with no nearby crimes",
"Total bike network length within 1000 ft (ft)",
"Average bike network length per school (ft)"
),
Value = c(
n_schools,
total_crimes,
round(avg_crimes_per_school, 1),
schools_no_crime,
paste0(pct_no_crime, "%"),
round(total_bike_length, 0),
round(avg_bike_length, 0)
)
)
# Display the table nicely
library(knitr)
kable(summary_table, caption = "Summary of School Zone Safety and Bike Access in Philadelphia")
quarto run
render
