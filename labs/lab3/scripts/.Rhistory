View(my_tracts)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT & Black_MOE_PCT & Hispanic_MOE_PCT  < 5 ~ "High Confidence",
White_MOE_PCT | Black_MOE_PCT | Hispanic_MOE_PCT > 10 ~ "Low Confidence"
)
)
View(my_tracts)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT < 5 & Black_MOE_PCT < 5 & Hispanic_MOE_PCT < 5 ~ "High Confidence",
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10 ~ "Low Confidence",
TRUE ~ "Moderate Confidence"
),
# Flag: TRUE if any MOE > 10
high_MOE_flag = ifelse(
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10,
TRUE, FALSE)
)
View(my_tracts)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT < 5 & Black_MOE_PCT < 5 & Hispanic_MOE_PCT < 5 ~ "High Confidence",
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10 ~ "Low Confidence",
TRUE ~ "Moderate Confidence" #if none of the previous conditions are met, assign this value
),
# Flag: TRUE if any MOE > 10
flag = ifelse(
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10,
TRUE, FALSE)
)
my_tracts <- my_tracts %>%
mutate(
White_PCT = (whiteAloneE/totalPopulationE)*100,
Black_PCT = (`Black/African AmericanE`/totalPopulationE)*100,
Hispanic_PCT = (`Hispanic/LatinoE`/totalPopulationE)*100,
tract_name  = str_trim(str_extract(NAME, "^[^;]+")),
county_name = str_trim(str_extract(NAME, "(?<=; ).+?(?=;)")) %>%
str_remove(" County$")
)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT < 5 & Black_MOE_PCT < 5 & Hispanic_MOE_PCT < 5 ~ "High Confidence",
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10 ~ "Low Confidence",
TRUE ~ "Moderate Confidence" #if none of the previous conditions are met, assign this value
),
# Flag: TRUE if any MOE > 10
flag = ifelse(
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10,
TRUE, FALSE)
)
# Create summary statistics showing how many tracts have data quality issues
tract_summary_stat <- my_tracts %>%
summarize(
total_tracts = n(),
tracts_with_high_MOE = sum(flag, na.rm = TRUE),
percent_high_MOE = (tracts_with_high_MOE / total_tracts) * 100
)
View(tract_summary_stat)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
names(my_tracts)
View(tract_summary_stat)
Pattern_analysis <- my_tracts %>%
group_by(flag),
Pattern_analysis <- my_tracts %>%
group_by(flag),
Pattern_analysis <- my_tracts %>%
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
names(my_tracts)
Pattern_analysis <- my_tracts %>%
Pattern_analysis <- my_tracts %>%
group_by(flag)%>%
summarize(totalPopulationE= sum(totalPopulationE, na.rm = TRUE),
avg_white_pct = mean(White_PCT, na.rm = TRUE ),
avg_black_pct = mean(Black_PCT, na.rm = TRUE ),
avg_hispanic_pct = mean(Hispanic_PCT, na.rm = TRUE ),
n_tracts = n()
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
Pattern_analysis <- my_tracts %>%
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
pattern_analysis <- my_tracts %>%
group_by(flag)%>%
summarize(totalPopulationE= sum(totalPopulationE, na.rm = TRUE),
avg_white_pct = mean(White_PCT, na.rm = TRUE ),
avg_black_pct = mean(Black_PCT, na.rm = TRUE ),
avg_hispanic_pct = mean(Hispanic_PCT, na.rm = TRUE ),
n_tracts = n()
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
pattern_analysis <- my_tracts %>%
group_by(flag)%>%
summarize(totalPopulationE= sum(totalPopulationE, na.rm = TRUE),
avg_white_pct = mean(White_PCT, na.rm = TRUE ),
avg_black_pct = mean(Black_PCT, na.rm = TRUE ),
avg_hispanic_pct = mean(Hispanic_PCT, na.rm = TRUE ),
n_tracts = n()
)
View(pattern_analysis)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "California"
# Write your get_acs() code here
my_state <- get_acs(
geography = "county",
variables = c(MedianHouseholdIncome = "B19013_001",
TotalPopulation = "B01003_001"),
year = 2022,
output = "wide",
geometry = TRUE,
state = "CA",
survey = "acs5",
progress = FALSE
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
my_state <- my_state %>%
mutate(
NAME = str_remove(NAME, " County, California")
)
# Display the first few rows
head(my_state)
# Calculate MOE percentage and reliability categories using mutate()
my_state <- my_state %>%
mutate(
MOE_PCT = (MedianHouseholdIncomeM / MedianHouseholdIncomeE) * 100,
reliability = case_when(
MOE_PCT < 5 ~ "High Confidence",
MOE_PCT >= 5 & MOE_PCT <= 10 ~ "Moderate Confidence",
MOE_PCT > 10 ~ "Low Confidence"
),
unreliable = MOE_PCT > 10
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_reliability <- my_state %>%
count(reliability) %>%
mutate(percent = (n / sum(n)) * 100
)
# Create table of top 5 counties by MOE percentage
Top_MOE_Counties <- my_state %>%
arrange(desc(MOE_PCT)) %>%              # sort by MOE percentage, highest first
slice_head(n=5) %>%                          # select top 5 counties
select(
County = NAME,                        # county name
`Median Income` = MedianHouseholdIncomeE,
`Margin of Error` = MedianHouseholdIncomeM,
`MOE Percentage` = MOE_PCT,                              # MOE percentage
`reliability category` = reliability                           # reliability category
)
# Format as table with kable() - include appropriate column names and caption
kable(Top_MOE_Counties, digits = 2, caption = "Top 5 Counties by Margin of Error Percentage")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties <- my_state %>%
group_by(reliability) %>%
slice(1) %>%
ungroup()%>%
select(`County Name` = NAME,
`Median Income` = MedianHouseholdIncomeE,
`MOE percentage` = MOE_PCT,
`reliability category` = reliability
)
View(selected_counties)
# Define your race/ethnicity variables with descriptive names
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
my_tracts <- get_acs(geography = "tract",
variables = c(whiteAlone = "B03002_003",
`Black/African American` = "B03002_004",
`Hispanic/Latino` = "B03002_012",
totalPopulation = "B03002_001"),
year = 2022,
output = "wide",
geometry = TRUE,
state = "CA",
county = c("037", "063", "015"),
survey = "acs5",
progress = FALSE
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
names(my_tracts)
my_tracts <- my_tracts %>%
mutate(
White_PCT = (whiteAloneE/totalPopulationE)*100,
Black_PCT = (`Black/African AmericanE`/totalPopulationE)*100,
Hispanic_PCT = (`Hispanic/LatinoE`/totalPopulationE)*100,
tract_name  = str_trim(str_extract(NAME, "^[^;]+")),
county_name = str_trim(str_extract(NAME, "(?<=; ).+?(?=;)")) %>%
str_remove(" County$")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
Tract_Pct_Hispanic <- my_tracts %>%
arrange(desc(Hispanic_PCT)) %>%              # sort by MOE percentage, highest first
slice(1)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
library(sf)
avg_demographics <- my_tracts %>%
st_drop_geometry() %>%
group_by(county_name) %>%
summarize(
n_tracts = n(),
avg_white_pop = mean(White_PCT, na.rm = TRUE),
avg_black_pop = mean(Black_PCT, na.rm = TRUE),
avg_Hispanic_pop = mean(Hispanic_PCT, na.rm = TRUE),
)
# Create a nicely formatted table of your results using kable()
kable(avg_demographics, digits = 1,
col.names = c("County", "Number of Tracts",
"Avg. White %", "Avg. Black %", "Avg. Hispanic %"))
#why don't my tables look nice?
View(Tract_Pct_Hispanic)
View(avg_demographics)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT < 5 & Black_MOE_PCT < 5 & Hispanic_MOE_PCT < 5 ~ "High Confidence",
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10 ~ "Low Confidence",
TRUE ~ "Moderate Confidence" #if none of the previous conditions are met, assign this value
),
# Flag: TRUE if any MOE > 10
flag = ifelse(
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10,
TRUE, FALSE)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
tract_summary_stat <- my_tracts %>%
summarize(
total_tracts = n(),
tracts_with_high_MOE = sum(flag, na.rm = TRUE),
percent_high_MOE = (tracts_with_high_MOE / total_tracts) * 100
)
#Question for office hours - why do all of them have data quality issues?
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
pattern_analysis <- my_tracts %>%
group_by(flag)%>%
summarize(totalPopulationE= sum(totalPopulationE, na.rm = TRUE),
avg_white_pct = mean(White_PCT, na.rm = TRUE ),
avg_black_pct = mean(Black_PCT, na.rm = TRUE ),
avg_hispanic_pct = mean(Hispanic_PCT, na.rm = TRUE ),
n_tracts = n()
)
View(pattern_analysis)
View(my_state)
?case_when()
names(my_state)
summary_county_reliability <- my_state %>%
mutate(`algorithmic decisions` = case_when
(reliability = High Confidence ~ "Safe for algorithmic decisions",
summary_county_reliability <- my_state %>%
mutate(algorithmic_decisions = case_when
(reliability = High Confidence ~ "Safe for algorithmic decisions",
View(summary_reliability)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
summary_county_reliability <- my_state %>%
mutate(algorithmic_decisions = case_when(
reliability == "High Confidence" ~ "Safe for algorithmic decisions",
reliability == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
reliability == "Low Confidence" ~ "Requires manual review or additional data"
)) %>%
select(NAME,MedianHouseholdIncomeE, MOE_PCT,reliability)
# Format as a professional table with kable()
kable(summary_county_reliability, caption = "County Reliability and Algorithmic Recommendations")
View(summary_county_reliability)
high_confidnece <- my_state %>% filter(reliability==High Confidence)
high_confidnece <- my_state %>% filter(reliability== "High Confidence")
View(high_confidnece)
mod_confidnece <- my_state %>% filter(reliability== "Moderate Confidence")
View(mod_confidnece)
low_confidnece <- my_state %>% filter(reliability== "Low Confidence")
View(low_confidnece)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidyverse)
library(tidycensus)
library(knitr)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "California"
# Write your get_acs() code here
my_state <- get_acs(
geography = "county",
variables = c(MedianHouseholdIncome = "B19013_001",
TotalPopulation = "B01003_001"),
year = 2022,
output = "wide",
geometry = TRUE,
state = "CA",
survey = "acs5",
progress = FALSE
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
my_state <- my_state %>%
mutate(
NAME = str_remove(NAME, " County, California")
)
# Display the first few rows
head(my_state)
# Calculate MOE percentage and reliability categories using mutate()
my_state <- my_state %>%
mutate(
MOE_PCT = (MedianHouseholdIncomeM / MedianHouseholdIncomeE) * 100,
reliability = case_when(
MOE_PCT < 5 ~ "High Confidence",
MOE_PCT >= 5 & MOE_PCT <= 10 ~ "Moderate Confidence",
MOE_PCT > 10 ~ "Low Confidence"
),
unreliable = MOE_PCT > 10
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
summary_reliability <- my_state %>%
count(reliability) %>%
mutate(percent = (n / sum(n)) * 100
)
View(summary_reliability)
# Create table of top 5 counties by MOE percentage
Top_MOE_Counties <- my_state %>%
arrange(desc(MOE_PCT)) %>%              # sort by MOE percentage, highest first
slice_head(n=5) %>%                          # select top 5 counties
select(
County = NAME,                        # county name
`Median Income` = MedianHouseholdIncomeE,
`Margin of Error` = MedianHouseholdIncomeM,
`MOE Percentage` = MOE_PCT,                              # MOE percentage
`reliability category` = reliability                           # reliability category
)
# Format as table with kable() - include appropriate column names and caption
kable(Top_MOE_Counties, digits = 2, caption = "Top 5 Counties by Margin of Error Percentage")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
selected_counties <- my_state %>%
group_by(reliability) %>%
slice(1) %>%
ungroup()%>%
select(`County Name` = NAME,
`Median Income` = MedianHouseholdIncomeE,
`MOE percentage` = MOE_PCT,
`reliability category` = reliability
)
# Define your race/ethnicity variables with descriptive names
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
my_tracts <- get_acs(geography = "tract",
variables = c(whiteAlone = "B03002_003",
`Black/African American` = "B03002_004",
`Hispanic/Latino` = "B03002_012",
totalPopulation = "B03002_001"),
year = 2022,
output = "wide",
geometry = TRUE,
state = "CA",
county = c("037", "063", "015"),
survey = "acs5",
progress = FALSE
)
# Calculate percentage of each group using mutate()
# Create percentages for white, Black, and Hispanic populations
# Add readable tract and county name columns using str_extract() or similar
names(my_tracts)
my_tracts <- my_tracts %>%
mutate(
White_PCT = (whiteAloneE/totalPopulationE)*100,
Black_PCT = (`Black/African AmericanE`/totalPopulationE)*100,
Hispanic_PCT = (`Hispanic/LatinoE`/totalPopulationE)*100,
tract_name  = str_trim(str_extract(NAME, "^[^;]+")),
county_name = str_trim(str_extract(NAME, "(?<=; ).+?(?=;)")) %>%
str_remove(" County$")
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
Tract_Pct_Hispanic <- my_tracts %>%
arrange(desc(Hispanic_PCT)) %>%              # sort by MOE percentage, highest first
slice(1)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
library(sf)
avg_demographics <- my_tracts %>%
st_drop_geometry() %>%
group_by(county_name) %>%
summarize(
n_tracts = n(),
avg_white_pop = mean(White_PCT, na.rm = TRUE),
avg_black_pop = mean(Black_PCT, na.rm = TRUE),
avg_Hispanic_pop = mean(Hispanic_PCT, na.rm = TRUE),
)
# Create a nicely formatted table of your results using kable()
kable(avg_demographics, digits = 1,
col.names = c("County", "Number of Tracts",
"Avg. White %", "Avg. Black %", "Avg. Hispanic %"))
View(avg_demographics)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
Tract_Pct_Hispanic <- my_tracts %>%
arrange(desc(Hispanic_PCT)) %>%              # sort by MOE percentage, highest first
slice(1)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
library(sf)
avg_demographics <- my_tracts %>%
st_drop_geometry() %>%
group_by(county_name) %>%
summarize(
n_tracts = n(),
avg_white_pop = mean(White_PCT, na.rm = TRUE),
avg_black_pop = mean(Black_PCT, na.rm = TRUE),
avg_Hispanic_pop = mean(Hispanic_PCT, na.rm = TRUE),
)
# Create a nicely formatted table of your results using kable()
kable(avg_demographics, digits = 1,
col.names = c("County", "Number of Tracts",
"Avg. White %", "Avg. Black %", "Avg. Hispanic %"))
View(Tract_Pct_Hispanic)
View(avg_demographics)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
my_tracts<- my_tracts %>%
mutate(
White_MOE_PCT = (whiteAloneM / whiteAloneE) * 100,
Black_MOE_PCT = (`Black/African AmericanM` / `Black/African AmericanE`) * 100,
Hispanic_MOE_PCT = (`Hispanic/LatinoM` / `Hispanic/LatinoE`) * 100,
reliability = case_when(
White_MOE_PCT < 5 & Black_MOE_PCT < 5 & Hispanic_MOE_PCT < 5 ~ "High Confidence",
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10 ~ "Low Confidence",
TRUE ~ "Moderate Confidence" #if none of the previous conditions are met, assign this value
),
# Flag: TRUE if any MOE > 10
flag = ifelse(
White_MOE_PCT > 10 | Black_MOE_PCT > 10 | Hispanic_MOE_PCT > 10,
TRUE, FALSE)
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
# Create summary statistics showing how many tracts have data quality issues
tract_summary_stat <- my_tracts %>%
summarize(
total_tracts = n(),
tracts_with_high_MOE = sum(flag, na.rm = TRUE),
percent_high_MOE = (tracts_with_high_MOE / total_tracts) * 100
)
View(tract_summary_stat)
# Group tracts by whether they have high MOE issues
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
pattern_analysis <- my_tracts %>%
group_by(flag)%>%
summarize(totalPopulationE= sum(totalPopulationE, na.rm = TRUE),
avg_white_pct = mean(White_PCT, na.rm = TRUE ),
avg_black_pct = mean(Black_PCT, na.rm = TRUE ),
avg_hispanic_pct = mean(Hispanic_PCT, na.rm = TRUE ),
n_tracts = n()
)
View(pattern_analysis)
